Copyright (c) 2013 Robert Markwick
See the file license.txt for copying permission

This document explains how to write XPINS scripts.
XPINS stands for XPINS: Program Instruction Notation/Script

Each XPINS file has the following components:
-Version Compatibility Statements
-Constant Declaration Block
-Function Declaration Blocks
-Code Block

XPINS files can also have comments. XPINS supports both Single and Multiline Comments.
Single line comments: //...
Multiline comments: /*...*/
Multiline comments can be nested: /* ... /*...*/ ... */

Most non-comment text in XPINS is case insensitive. For example, the variables myVar and MYVAR are identical. There are two exceptions:
Version Compatibility Statements must be uppercase
Characters in a string Constant are case sensitive (e.g. "Hello World" is not the same as "hello world")


VERSION COMPATIBILITY STATEMENTS:
The first part of every XPINS file are two version compatibility statements. The first version compatibility statement states which version of the XPINS compiler the script is designed for, and the second one states which version of the XPINS parser the script is desgined for. The Compiler statement is always the first line of an XPINS file, and the Parser compabitiblity statement is the second. A set of Compatibility statements would look like this:
@COMPILER[0.7]
@PARSER[0.12]
Only the first two components of the version numbers are used for compatibility statements, even though the version numbers for the compiler and the parser each have three components. This is because the third number is used for bug/performance fixes and therefore does effect the availability of functions or language features. In order to be compatible with a certain verison of the compiler or parser, the script's Major version number must match that of the software and the Minor version number must be less than or equal to that of the software. For example, a script that states a compiler version number of 1.2 will be compatible with all versions of the compiler from 1.2.0 until 2.0.0.


CONSTANT BLOCKS:
	The second part of every XPINS file is a constant block. Just like in many other languages, XPINS allows programmers to define constants. For example, if a script is simulating the motion of a thousand particles, it might define the constant NUM_PARTICLES=1E3
	The syntax for constant declaration looks like this:
	___=_____; 
	The first blank is the name of the constant, while the second blank is the value. More on the acceptable constant values later.
	XPINS also provides the following built in constants:
	TRUE=T
	FALSE=T
	YES=T
	NO=F
	PI=3.141592653589793
	E=2.718281828459045
	

FUNCTION BLOCKS:
The third part of every XPINS file is a function block. XPINS is designed to interact with C++ code. In order to call C++ functions from XPINS scripts, they must be declared to the Compiler the scripts can be compiled properly. A simple function block would look like this:
@FUNC
NUM Foo(NUM,BOOL)
@END
A function block starts with @FUNC and ends with @END. Between these are function declarartions, with one line per function.
Each function declaration contains three parts: The return type, the function name, and the parameters
The return type is required and must be a valid type in XPINS (more on types later)
The name of each function must be unique (no overloading). The name of the function may be identical to the name of its correspoinding C++ function, but it doesn't have to be. This is the name used to identify the function in the script
The parameters follow the format (___). Because XPINS doesn't support overloading, the blank is essentially a comment. The function block below is equivalent to the one above:
@FUNC
NUM Foo()
@END

XPINS allows definition of multiple function blocks, through a feature called modules. Modules are used to separate the implementation of functions, as the parser receives a different bindings object for each module (the @FUNC block will correspond to the zeroth binding object). For example, if a script is controlling a robot, it might have its functions that turn on motors in one module while the functions to do advanced calculations are in the @FUNC block.
A module block looks like this:
@MODULE ___
	____
@END
	The first blank is the name of the module. This name is used for readiability only, the compiler ignores it. The other blank is a set of function delcarations, declared exactly the same way they are declared in the @FUNC block.


CODE BLOCKS:
The final and most important part of an XPINS file is the code block. This is where the instructions for the script go. A code block starts with @CODE and ends with @END. Like the function block, each of these gets its own line. The following code block:
@CODE
	PRINT("HELLO WORLD!\n")
@END
prints the string "HELLO WORLD!\n"

The next few sections wil describe code blocks in more depth.


VARIABLES and DATA TYPES:
Like any most programming languages, XPINS allows variables to be defined. The syntax for declaring a variable is: @TYPE NAME=VALUE
The Variable can be given any name consiting of alphanumeric characters and underscores, as long as it does not start with a number. Variables name must also be different from the names of contstants.
NOTE: If multiple variables have the same name, the variables will be merged into one variable. If these variables are of different types, the first type will be used.
Variables can be assigned one of three things for a value: the value of another variable, a constant or literal value, or the result of a function or expression (more on expressions and functions later). Variables may be assigned a new value after declaration in the following manner: NAME=VALUE. The @TYPE is only used when the variable is declared.

NOTE with literals: Values used in complex literals (such as those for VEC, MAT, etc.) do not have to themselves be literals.
There are ten Data types in XPINS:
BOOL
	Variables of this type can hold values of either true or false.
	Literal syntax: T for true and F for false
NUM
	Variables of this type can hold double precision floating point values.
	Literal syntax: 10.5, 2.3, 0, etc. Scientific notation may also be used (e.g. 2.04E2 is the same as 204)
VEC
	Variables of this type hold an X, Y, and Z component, each of which is a NUM.
	Literal syntax:	<X,Y,Z> with X, Y, and Z being the corresponding components of the Vector. Alternatively: P<R,Theta,Z>, which uses cylindrical coordinates; and S<Rho,Theta,Phi>, which uses shperical coordinates.
QUAT
	Variables of this type are quaternions holding NUM and VEC components.
	Literal syntax: Q<R,V>, with R being the NUM component and V being the VEC component. Alternatively: Q<R,X,Y,Z> with R being the NUM component and X, Y, and Z being the corresponding components of the Vector component
MAT
	Variables of this type hold Matrices of NUMs. A matrix can be of any size.
	Literal syntax:	[__,__,...,__|__,__,...,__|...|__,__,...,__]. Each blank is a NUM value (does not have to be a NUM literal). Columns are comma separated, and rows are separated by |'s.
POLY
	Variables of this type hold Polynomials with NUM coeffecients. These polynomials can be dependent on up to seven variables (X, Y, Z, T, U, V, and W).
	Literal syntax: (A_X2+B_X_Y+C_Y2+D_X+E_Y+F) Each monomial is separated and is defined with the following syntax: COEFF_XP_YP_ZP_TP_UP_VP_WP. COEFF is the coefficient and is a value passed to the literal. Each P is the integer power assigned to its variable. Powers must be literals. If a variable is followed directly by and underscore instead of a power the power is assumed to be one. If a variable is ommitted from a monomial it will have a power of zero.
FIELD
	Variables of this type hold an X, Y, and Z component, each of which is a POLY.
	Literal syntax:	F<X,Y,Z> with X, Y, and Z being the corresponding components of the Vector Field.
STR
	Variables of this type hold a string.
	Literal syntax: "..." with any characters legal in a C++ string literal. This includes \n, \t, \", \\, etc.
OBJ
	Variables of this point hold a pointer. These pointers usually point to objects created by the host program. Because they are used to store references to pieces of data not used by XPINS, there is no literal syntax for values of this type.
ARR
	Variables of this type hold an array of other values. Note that values do not have to be of the same type.
	Literal syntax: { __, __, __, ..., __ } where each __ is a value.


FUNCTIONS:
Functions in XPINS are very similar to functions in C++. They are called using the following syntax:
FUNCTION_NAME(PARAMETER1,PARAMTER2,...)

XPINS also includes built in functions for a variety of operations. To learn more see BUILT IN FUNCTION CATALOG

DOT SYNTAX:
XPINS features a convenient Dot syntax for function calls. This can be used to emulate the object oriented features of C++ by emphasizing the first parameter. Dot syntax looks like this:
PARAMETER1.FUNCTION_NAME(PARMATER2,...)
Further, if a function only has one paramter, the parentheses may be excluded. For example:
MATRIX.DETERMINANT
Dot syntax is not recommended for functions whose first parameter is of type NUM or BOOl.

EXPRESSIONS:
In C++, there are expressions and operators that make it very easy to perform simple calculations. In XPINS, there are functions for addition, subtraction, etc, but those are harder to use (and take up more space). XPINS has expressions that allow mathematical calculations to performded easier. Here is an example expression:
?B(Var1<Var2)?
An expression always starts and ends with a '?'. At the beginning of the expression is the return type: B, N, V, Q, M, or F (there is no support for String, Object, or Array expressions at this time). After the type is a pair of parentheses containing the input and operator. The inputs can be constants, variables, or even other expressions. The operator goes before the last input. Valid operators at this point in time are listed below. The format for this list is: <op> : <Use> (<Return types>):(<1st Input type>),(<2nd Input type>),...
+  : Addition (N):(N),(N)
++ : increment (N):(N)  (before returns result, after returns input and increments after)
+  : Vector Addition (V):(V),(V)
+  : Matrix Addition (M):(M),(M)
+  : Polynomial Addition (P):(P),(P)
-  : Subtraction (N):(N),(N)
-- : decrement (N):(N)  (before returns result, after returns input and increments after)
-  : Vector Subtraction (V):(V),(V)
-  : Matrix Subtraction (M):(M),(M)
-  : Polynomial Subtraction (P):(P),(P)
*  : Multiplication (N):(N),(N)
*  : Vector-Scalar Multiplication (V):(V),(N)
*  : Vector Dot Product (F):(V),(V)
*  : Vector Cross Product (V):(V),(V)
*  : Matrix-Scalar Multiplication (M):(M),(N)
*  : Matrix-Vector Multiplication (V):(M),(V)
*  : Matrix-Matrix Multiplication (M):(M),(M)
*  : Polynomial-Scalar Multiplication (P):(P),(N)
*  : Polynomial-Polynomial Multiplication (P):(P),(P)
/  : Division (N):(N),(N)
/  : Vector-Scalar Division (V):(V),(V),(N)
/  : Matrix-Matrix Division (M):(M),(N)
%  : Remainder (N):(N),(N)
^  : Power (N):(N),(N)
^  : Matrix Power (M):(M),(N)
^  : Polynomial Power (P):(P),(N)
&  : Polynomial Composition (P):(P),(N) //Variable value, Variable index
&  : Vector Field Composition (F):(P),(N) //Variable value, Variable index
<  : Less than (B):(N),(N)
<= : less than or equal (B):(N),(N)
>  : Greater than (B):(N),(N)
>= : Greater than or equal (B):(N),(N)
== : Equal (B):(N),(N)
!= : Not Equal (B):(N),(N)
!  : Not (B):(B)
|| : Or (B):(B),(B)
&& : Or (B):(B),(B)
!= : Not Assign (B):(B)
|= : Or Assign (B):(B),(B)
&= : And Assign (B:)(B),(B)
Add a '=' after +,-,*,/,^, % to copy the result into the first (except ?V($M*=$V)? which will store the result in the Vector variable) variable, as long as it is of a matching type (e.g. dot product won't work but cross product will). Also, Order matters for expressions with differnet types, or expresons where the underlying mathematics is not commutative.

AUTOMATIC TYPE CASTING:
If a function or expression requires one type but a value of another type is provide, the type will be automatically converted. Type casting works with the following conversions:
NUM to POLY
VEC to FIELD
VEC to MAT
MAT to VEC

CONTROL FLOW and LOOPS:
Sometimes in a script there is code that should be executed multiple times or only if certain conditions are true. In these scenarios XPINS provides the following statements:
@IF CONDITION { ... }
	Executes the code between the curly braces if and only if the condition is true

@ELIF CONDITION { ... }
	When the preceding IF (or ELIF) fails AND the condition is true, the code between the curly braces is executed.

@ELSE CONDITION { ... }
	When the preceding IF (or ELIF) fails, the code between the curly braces is executed.

@WHILE CONDITION { ... }
	Executes the code between the curly braces repeatedly until the condition is false

@LOOP TIMES { ... }
	Executes the code between the curly braces (can be useful for measuring performance)

@BREAK
	Exits innermost loop


SUBSCRIPTING:
Subscripting allows access to components of complex data structures in XPINS. The syntax for subscripting looks like this:
ComplexValue[index]
In the current version of XPINS, every index must be a NUM

Subscripting can be used for both getting and setting values. For example:
@ARR Array={0,1,2}
Foo(Array[0]) //0
Array[0]=2
Foo(Array[0])//2

Subscripting is supported by the following data structures:
VEC to NUM : //Works but Using .X, .Y, and .Z is recommended
VEC[0] = X component
VEC[1] = Y component
VEC[2] = Z component

QUAT to NUM : //Works but Using .R, .V.X, .V.Y, and .V.Z is recommended
QUAT[0] = R component
QUAT[1] = X component
QUAT[2] = Y component
QUAT[3] = Z component

MAT to NUM :
MAT[row][col] = Value at row and column

FIELD to POLY : //Works but Using .P, .Q, and .R is recommended
FIELD[0] = X component (P)
FIELD[1] = Y component (Q)
FIELD[2] = Z component (R)

ARRAY to (ANY TYPE)
ARRAY[index] = value at index
ARRAY subscripts can also be chained:
ARRAY[index1][index2]
